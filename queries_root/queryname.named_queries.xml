<queries>
	<query name="net.cdolinc.student.invalid_email.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Student Emails - Flat</summary>
		<description>PowerQuery to identify students with invalid email addresses</description>
		<columns>
			<column column="students.id">client_uid</column>
			<column column="students.dcid">id</column>
			<column column="students.enroll_status">action</column>
			<column column="psm_studentcontact.email">email</column>
		</columns>
		<sql>
			<![CDATA[
        SELECT 
        rownum as client_uid,
        students.dcid as id,
        'UPDATE' as action,
        students.student_web_id||'@365.cdolinc.net' as email 
        FROM students
        LEFT JOIN
			(
				SELECT students.dcid,
					psm_studentcontact.email
				FROM psm_studentcontact
				INNER JOIN psm_studentcontacttype
					ON psm_studentcontact.studentcontacttypeid = psm_studentcontacttype.id
					AND psm_studentcontacttype.name            = 'Self'
				INNER JOIN sync_studentmap
					ON psm_studentcontact.studentid = sync_studentmap.studentid
				INNER JOIN students
					ON sync_studentmap.studentsdcid = students.dcid
			) 
			std_email ON students.dcid    = std_email.dcid
        WHERE 
			(
				std_email.email           IS NULL
				OR std_email.email NOT LIKE '%@365.cdolinc.net'
			)
        AND students.enroll_status = 0 AND students.student_web_id IS NOT NULL
        ORDER BY students.last_name
        ]]>
		</sql>
	</query>
	<query name="net.cdolinc.sca.sequence.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Contact Priority Order - Flat</summary>
		<description>PowerQuery to identify student contact associations that require sequence updates</description>
		<columns>
			<column column="STUDENTCONTACTASSOC.PERSONID">contactid</column>
			<column column="STUDENTCONTACTASSOC.STUDENTCONTACTASSOCID">deleted</column>
			<column column="STUDENTCONTACTASSOC.STUDENTCONTACTASSOCID">studentContactId</column>
			<column column="STUDENTCONTACTASSOC.CONTACTPRIORITYORDER">sequence</column>
			<column column="STUDENTS.DCID">dcid</column>
			<column column="STUDENTS.STUDENT_NUMBER">studentNumber</column>
			<column column="STUDENTS.FIRST_NAME">firstName</column>
			<column column="STUDENTS.MIDDLE_NAME">middleName</column>
			<column column="STUDENTS.LAST_NAME">lastName</column>
			<column column="SCHOOLS.ABBREVIATION">schoolAbbr</column>
			<column column="SCHOOLS.SCHOOL_NUMBER">schoolNumber</column>
			<column column="ORIGINALCONTACTMAP.ORIGINALCONTACTTYPE">originalContactType</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_HOWOFTEN">autosendHowOften</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_SUMMARY">emailSummary</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_GRADEDETAIL">assignmentDetails</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_ATTENDANCEDETAIL">attendanceDetails</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_SCHOOLANNOUNCEMENTS">schoolAnnouncements</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_BALANCEALERT">balanceAlert</column>
			<column column="GUARDIANNOTIFICATIONEMAIL.NOTIFICATIONEMAIL">notificationEmails</column>
			<column column="GUARDIANSTUDENT.GUARDIANSTUDENTID">canAccessData</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					'false' AS "deleted",
					"studentContactId",
					"sequence",
					"dcid",
					"studentNumber",
					"firstName",
					"middleName",
					"lastName",
					"schoolAbbr",
					"schoolNumber",
					"originalContactType",
					"autosendHowOften",
					"emailSummary",
					"assignmentDetails",
					"attendanceDetails",
					"schoolAnnouncements",
					"balanceAlert",
					"notificationEmails",
					"canAccessData"
				FROM
					(
						SELECT 
							SCA.PERSONID "contactid",
							SCA.STUDENTCONTACTASSOCID "studentContactId",
							SCA.CONTACTPRIORITYORDER "sca_contactpriorityorder",
							ROW_NUMBER() Over (Partition BY SCA.STUDENTDCID Order By SCA.CONTACTPRIORITYORDER) "sequence",
							S.DCID "dcid",
							S.STUDENT_NUMBER "studentNumber",
							S.FIRST_NAME "firstName",
							S.MIDDLE_NAME "middleName",
							S.LAST_NAME "lastName",
							SCH.ABBREVIATION "schoolAbbr",
							SCH.SCHOOL_NUMBER "schoolNumber",
							OCM.ORIGINALCONTACTTYPE "originalContactType",
							nvl(GS.AUTOSEND_HOWOFTEN,0) "autosendHowOften", 
							DECODE(GS.AUTOSEND_SUMMARY, Null, 'false', 0, 'false', 1, 'true') "emailSummary",
							DECODE(GS.AUTOSEND_GRADEDETAIL, Null, 'false', 0, 'false', 1, 'true') "assignmentDetails",
							DECODE(GS.AUTOSEND_ATTENDANCEDETAIL, Null, 'false', 0, 'false', 1, 'true') "attendanceDetails",
							DECODE(GS.AUTOSEND_SCHOOLANNOUNCEMENTS, Null, 'false', 0, 'false', 1, 'true') "schoolAnnouncements",
							DECODE(GS.AUTOSEND_BALANCEALERT, Null, 'false', 0, 'false', 1, 'true') "balanceAlert",
							EMAIL_LIST.LIST_AGG "notificationEmails",
							NVL2(GS.GUARDIANSTUDENTID,'true','false') "canAccessData"
						FROM STUDENTCONTACTASSOC SCA
						LEFT JOIN PERSON P ON P.ID = SCA.PERSONID
						LEFT JOIN STUDENTS S ON S.DCID = SCA.STUDENTDCID
						LEFT JOIN SCHOOLS SCH ON SCH.SCHOOL_NUMBER = S.SCHOOLID
						LEFT JOIN ORIGINALCONTACTMAP OCM ON OCM.STUDENTCONTACTASSOCID = SCA.STUDENTCONTACTASSOCID
						LEFT JOIN GUARDIANPERSONASSOC GPA ON GPA.PERSONID = SCA.PERSONID
						LEFT JOIN GUARDIAN G ON G.GUARDIANID  = GPA.GUARDIANID AND GPA.PERSONID = P.ID
						LEFT JOIN GUARDIANSTUDENT GS ON GS.GUARDIANID = G.GUARDIANID AND GS.STUDENTSDCID = S.DCID
						LEFT JOIN
							(
								SELECT 
									GNE.GUARDIANSTUDENTID,
									ListAgg(GNE.NOTIFICATIONEMAIL, ', ') Within GROUP (ORDER BY GNE.NOTIFICATIONEMAIL) LIST_AGG
								FROM 
									GUARDIANNOTIFICATIONEMAIL GNE
								GROUP BY 
									GNE.GUARDIANSTUDENTID
							) EMAIL_LIST
						ON EMAIL_LIST.GUARDIANSTUDENTID = GS.GUARDIANSTUDENTID
					)
				WHERE "sca_contactpriorityorder" != "sequence"
				ORDER BY "studentContactId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.phone_sequence.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Contact Phone Number Priority Order - Flat</summary>
		<description>PowerQuery to identify contact phone number associations that require sequence updates</description>
		<columns>
			<column column="PERSONPHONENUMBERASSOC.PERSONID">contactid</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">deleted</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">contactsPhoneId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERPRIORITYORDER">sequence</column>
			<column column="PERSONPHONENUMBERASSOC.ISPREFERRED">preferred</column>
			<column column="PERSONPHONENUMBERASSOC.PHONETYPECODESETID">phoneType</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERID">phoneNumberId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERASENTERED">phoneNumber</column>
			<column column="PHONENUMBER.PHONENUMBEREXT">extension</column>
			<column column="PHONENUMBER.ISSMS">sms</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					"deleted",
					"contactsPhoneId",
					"sequence",
					"preferred",
					"phoneType",
					"phoneNumberId",
					"phoneNumber",
					"extension",
					"sms"
				FROM
				(
					SELECT 
						personphonenumberassoc.PERSONID "contactid",
						'false' AS "deleted",
						personphonenumberassoc.PERSONPHONENUMBERASSOCID "contactsPhoneId",
						personphonenumberassoc.PHONENUMBERPRIORITYORDER "phoneNumberPriorityOrder",
						ROW_NUMBER() Over (Partition BY person.ID Order By personphonenumberassoc.PHONENUMBERPRIORITYORDER) "sequence",
						DECODE(personphonenumberassoc.ISPREFERRED, 0, 'false', 1, 'true') "preferred",
						(
							SELECT 
								CODE 
							FROM 
								CODESET 
							WHERE 
								CODESETID= personphonenumberassoc.PHONETYPECODESETID
						) "phoneType",
						personphonenumberassoc.PHONENUMBERID "phoneNumberId",
						personphonenumberassoc.PHONENUMBERASENTERED "phoneNumber",
						phonenumber.PHONENUMBEREXT "extension",
						DECODE(phonenumber.ISSMS, 0, 'false', 1, 'true') "sms"
					FROM person
					INNER JOIN personphonenumberassoc 
						ON person.ID = personphonenumberassoc.PERSONID
					LEFT JOIN phonenumber 
						ON personphonenumberassoc.PHONENUMBERID = phonenumber.PHONENUMBERID
					LEFT OUTER JOIN students 
						ON person.ID = students.PERSON_ID
					WHERE students.DCID IS NULL
				)
				WHERE "phoneNumberPriorityOrder" != "sequence"
				ORDER BY "contactsPhoneId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.invalid_phone_format.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Contact Phone Number Format - Flat</summary>
		<description>PowerQuery to identify contact phone number associations that require phonenumberasentered updates</description>
		<columns>
			<column column="PERSONPHONENUMBERASSOC.PERSONID">contactid</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">deleted</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">contactsPhoneId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERPRIORITYORDER">sequence</column>
			<column column="PERSONPHONENUMBERASSOC.ISPREFERRED">preferred</column>
			<column column="PERSONPHONENUMBERASSOC.PHONETYPECODESETID">phoneType</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERID">phoneNumberId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERASENTERED">phoneNumber</column>
			<column column="PHONENUMBER.PHONENUMBEREXT">extension</column>
			<column column="PHONENUMBER.ISSMS">sms</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					"deleted",
					"contactsPhoneId",
					"sequence",
					"preferred",
					"phoneType",
					"phoneNumberId",
					"phoneNumber",
					"extension",
					"sms"
				FROM
					(
						SELECT 
						"contactid",
						"deleted",
						"contactsPhoneId",
						"sequence",
						"preferred",
						"phoneType",
						"phoneNumberId",
						"phoneNumberAsEntered",
						CASE
							WHEN LENGTH(clean_phone) = 10
							THEN SUBSTR(clean_phone, 1, 3)
							|| '-'
							|| SUBSTR(clean_phone, 4, 3)
							|| '-'
							|| SUBSTR(clean_phone, 7, 4)
							ELSE NULL
						END AS "phoneNumber",
						"extension",
						"sms"
					FROM
						(
							SELECT 
								personphonenumberassoc.PERSONID "contactid",
								'false' AS "deleted",
								personphonenumberassoc.PERSONPHONENUMBERASSOCID "contactsPhoneId",
								personphonenumberassoc.PHONENUMBERPRIORITYORDER "sequence",
								DECODE(personphonenumberassoc.ISPREFERRED, 0, 'false', 1, 'true') "preferred",
								(
									SELECT 
										CODESET.CODE
									FROM CODESET
									WHERE CODESET.CODESETID = personphonenumberassoc.PHONETYPECODESETID
								) "phoneType",
								personphonenumberassoc.PHONENUMBERID "phoneNumberId",
								personphonenumberassoc.PHONENUMBERASENTERED "phoneNumberAsEntered",
								SUBSTR(TRANSLATE(personphonenumberassoc.PHONENUMBERASENTERED, '1234567890'
								|| personphonenumberassoc.PHONENUMBERASENTERED, '1234567890'), 1, 10) AS clean_phone,
								phonenumber.PHONENUMBEREXT "extension",
								DECODE(phonenumber.ISSMS, 0, 'false', 1, 'true') "sms"
							FROM person
							INNER JOIN personphonenumberassoc
								ON person.ID = personphonenumberassoc.PERSONID
							LEFT OUTER JOIN phonenumber
								ON personphonenumberassoc.PHONENUMBERID = phonenumber.PHONENUMBERID
							LEFT OUTER JOIN students
								ON person.ID         = students.PERSON_ID
							WHERE students.DCID IS NULL
						)
					)
				WHERE "phoneNumberAsEntered" != "phoneNumber"
				AND "phoneNumberAsEntered" NOT LIKE '% x%'
				ORDER BY "contactsPhoneId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.duplicate_phone.flat" flattened="true" tags="myPowerQuery">
		<summary>Duplicate Contact Phone Number - Flat</summary>
		<description>PowerQuery to identify duplicate contact phone number associations</description>
		<columns>
			<column column="PERSONPHONENUMBERASSOC.PERSONID">contactid</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">contactsPhoneId</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					"contactsPhoneId"
				FROM
					(
						SELECT 
						personphonenumberassoc.personid "contactid",
						personphonenumberassoc.PERSONPHONENUMBERASSOCID "contactsPhoneId",
						ROW_NUMBER() Over (Partition BY person.ID, phonenumber.phonenumber Order By personphonenumberassoc.PHONENUMBERPRIORITYORDER) rn
						FROM person
						INNER JOIN personphonenumberassoc 
							ON person.ID = personphonenumberassoc.PERSONID
						LEFT OUTER JOIN phonenumber 
							on personphonenumberassoc.phonenumberid = phonenumber.phonenumberid
						LEFT OUTER JOIN students 
							ON person.ID = students.PERSON_ID
					WHERE students.DCID IS NULL
					)
				WHERE rn > 1
				ORDER BY "contactsPhoneId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.address_sequence.flat" flattened="true" tags="myPowerQuery">
	<summary>Invalid Contact Address Priority Order - Flat</summary>
	<description>PowerQuery to identify contact address associations that require sequence updates</description>
	<columns>
		<column column="PERSONADDRESSASSOC.PERSONID">contactid</column>
		<column column="PERSONADDRESSASSOC.PERSONADDRESSASSOCID">deleted</column>
		<column column="PERSONADDRESSASSOC.PERSONADDRESSASSOCID">contactsAddressId</column>
		<column column="PERSONADDRESSASSOC.ADDRESSPRIORITYORDER">sequence</column>
		<column column="PERSONADDRESSASSOC.PERSONADDRESSID">addressId</column>
		<column column="PERSONADDRESSASSOC.ADDRESSTYPECODESETID">addressType</column>
		<column column="PERSONADDRESS.STREET">street</column>
		<column column="PERSONADDRESS.LINETWO">linetwo</column>
		<column column="PERSONADDRESS.UNIT">unit</column>
		<column column="PERSONADDRESS.CITY">city</column>
		<column column="PERSONADDRESS.STATESCODESETID">state</column>
		<column column="PERSONADDRESS.COUNTRYCODESETID">country</column>
		<column column="PERSONADDRESS.POSTALCODE">postalcode</column>	
		<column column="PERSONADDRESSASSOC.STARTDATE">startDate</column>
		<column column="PERSONADDRESSASSOC.ENDDATE">endDate</column>
	</columns>
	<sql>
		<![CDATA[
			SELECT 
				"contactid",
				"deleted",
				"contactsAddressId",
				"sequence",
				"addressId",
				"addressType",
				"street",
				"linetwo",
				"unit",
				"city",
				"state",
				"country",
				"postalcode",
				"startDate",
				"endDate"
			FROM
				(
					SELECT 
					personaddressassoc.personid "contactid",
					'false' AS "deleted",
					personaddressassoc.PERSONADDRESSASSOCID "contactsAddressId",
					personaddressassoc.ADDRESSPRIORITYORDER "addressPriorityOrder",
					ROW_NUMBER() Over (Partition BY person.ID Order By personaddressassoc.ADDRESSPRIORITYORDER) "sequence",
					personaddressassoc.PERSONADDRESSID "addressId",
					(
						SELECT CODE 
						FROM CODESET 
						WHERE CODESETID= personaddressassoc.ADDRESSTYPECODESETID
					) "addressType",
					personaddress.STREET "street",
					personaddress.LINETWO "linetwo",
					personaddress.UNIT "unit",
					personaddress.CITY "city",
					(
						SELECT CODE 
						FROM CODESET 
						WHERE CODESETID= personaddress.STATESCODESETID
					) "state",
					(
						SELECT CODE 
						FROM CODESET 
						WHERE CODESETID= personaddress.COUNTRYCODESETID
					) "country",
					personaddress.POSTALCODE "postalcode",
					personaddressassoc.STARTDATE "startDate",
					personaddressassoc.ENDDATE "endDate"
				FROM person
				INNER JOIN personaddressassoc
					ON person.ID = personaddressassoc.PERSONID
				LEFT OUTER JOIN personaddress
					ON personaddressassoc.PERSONADDRESSID = personaddress.PERSONADDRESSID
				LEFT OUTER JOIN students
					ON person.ID         = students.PERSON_ID
				WHERE students.DCID IS NULL
				)
			WHERE "addressPriorityOrder" != "sequence"
			ORDER BY "contactsAddressId"
		]]>
	</sql>
</query>
<query name="net.cdolinc.allDemoData.students.demographics" flattened="true">
		<summary>CDOL: All Demo Data</summary>
		<description>List all demographic data for students and their first 6 contacts</description>
		<columns>
			<column column="students.STATE_STUDENTNUMBER" description="State Number">students.01 State Number</column>
			<column column="StudentCoreFields.PrevStudentID" description="Old SMS Number">students.02 Old SMS Number </column>
			<column column="students.STUDENT_NUMBER" description="Student Number">students.03 Student Number</column>
			<column column="students.FIRST_NAME" description="First Name">students.04 First Name</column>
			<column column="students.MIDDLE_NAME" description="Middle Name">students.05 Middle Name</column>
			<column column="students.LAST_NAME" description="Last Name">students.06 Last Name</column>
			<column column="students.LASTFIRST" description="Last First">students.07 Last First</column>
			<column column="U_STUDENT_ADDITIONAL_INFO.STUDENT_PREFERRED_NAME" description="Preferend Name">students.08 Preferred Name</column>
			<column column="students.GENDER" description="Gender">students.09 Gender</column>
			<column column="students.dob" description="DoB">students.10 DoB</column>
			<column column="students.GRADE_LEVEL" description="Grade">students.11 Grade Level</column>
			<column column="students.HOME_ROOM" description="Home Room">students.12 Home Room</column>
			<column column="students.CLASSOF" description="Class Of">students.13 Class of</column>
			<column column="students.FEDETHNICITY" description="Ethnicity">students.14 Ethnicity</column>
			<column column="STUDENTRACE.RACECD" description="Race">students.15 race</column>
			<column column="Gen.name" description="District of Residence">students.16 District of Residence</column>
			<column column="StudentCoreFields.FAMILY_REP" description="Family Rep">students.17 Family Rep</column>
			<column column="students.MAILING_STREET" description="Mailing Street">students.18 Mailing Street</column>
			<column column="students.MAILING_CITY" description="Mailing City">students.19 Mailing City</column>
			<column column="students.MAILING_STATE" description="Mailing State">students.20 Mailing State</column>
			<column column="students.MAILING_ZIP" description="Mailing Zip">students.21 Mailing Zip</column>
			<column column="students.STREET" description="Street">students.22 Street</column>
			<column column="students.CITY" description="City">students.23 City</column>
			<column column="students.STATE" description="State">students.24 State</column>
			<column column="students.ZIP" description="Zip">students.25 Zip</column>
			<column column="students.HOME_PHONE" description="Home Phone">students.26 Home Phone</column>
			<column column="U_STUDENT_ADDITIONAL_INFO.LOCKER_LOCATION" description="Locker Location">students.27 Locker Location</column>
			<column column="students.LOCKER_NUMBER" description="Locker Number">students.28 Locker Number</column>
			<column column="students.LOCKER_COMBINATION" description="Locker Combo">students.29 Locker Comb0</column>
			<column column="S_STU_NCEA_X.TITLEI_TF" description="Title 1">students.30 Title 1</column>
			<column column="S_STU_NCEA_X.DIAGNOSEDDISABILITY_TF" description="Disability">students.31 Disability</column>
			<column column="S_STU_NCEA_X.UNGRADED_TF" description="Ungraded">students.32 Ungraded</column>
			<column column="S_STU_NCEA_X.FEDERALNUTRITION" description="Free Reduced">students.33 Free Reduced</column>
			<column column="S_STU_NCEA_X.SUBSIDIZEDTRANS_TF" description="Sub Transportation">students.34 Sub Transportation</column>
			<column column="S_STU_NCEA_X.RELIGIOUSAFFILIATION" description="Religion">students.35 religion</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_PARISH" description="Parish">students.36 Student Parish</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_PARISH_CITY" description="Parish City">students.37 Student Parish City</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_PARISH_STATE" description="Parish State">students.38 Student Parish State</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_DATE" description="Baptism Date">students.39 Baptism Date</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_PARISH" description="Baptism Parish">students.40 Baptism Parish</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_CITY" description="Baptism City">students.41 Baptism City</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_STATE" description="Baptism State">students.42 Baptism State</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_DATE" description="Confession Date">students.43 Confession Date</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_PARISH" description="Confession Parish">students.44 Confession Parish</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_CITY" description="Confession City">students.45 Confession City</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_STATE" description="Confession State">students.46 Confession State</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_DATE" description="Communion Date">students.47 Communion Date</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_PARISH" description="Communion Parish">students.48 Communion Parish</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_CITY" description="Communion City">students.49 Communion City</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_STATE" description="Communion State">students.50 Communion State</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_DATE" description="Confirmation Date">students.51 Confirmation Date</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_PARISH" description="Confirmation Parish">students.52 Confirmation Parish</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_CITY" description="Confirmation City">students.53 Confirmation City</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_STATE" description="Confirmation State">students.54 Confirmation State</column>
			<column column="students.DOCTOR_NAME" description="Doctor Name">students.55 Doctor Name</column>
			<column column="students.DOCTOR_PHONE" description="Doctor Phone">students.56 Doctor Phone</column>
			<column column="StudentCoreFields.Dentist_Name" description="Dentist Name">students.57 Dentist Name</column>
			<column column="StudentCoreFields.dentist_phone" description="Dentist Phone">students.58 Dentist Phone</column>
			<column column="students.ALERT_MEDICAL" description="Medical Alert">students.59 Medical Alert</column>
			<column column="StudentCoreFields.ALLERGIES" description="Allergies">students.60 Allergies</column>
			<column column="students.ALERT_DISCIPLINE" description="Discipline Alert">students.61 Discipline Alert</column>
			<column column="students.ALERT_OTHER" description="Other Alert">students.61 Other Alert</column>
			<column column="students.LDAPENABLED" description="LDAP Enabled">students.62 LDAP Enabled</column>
			<column column="students.STUDENT_ALLOWWEBACCESS" description="Student Web Access">students.63 Student Web Access</column>
			<column column="students.STUDENT_WEB_ID" description="Student Username">students.64 Student Username</column>
			<column column="students.ALLOWWEBACCESS" description="Parent Web Access">students.65 Parent Web Access</column>
			<column column="students.WEB_ID" description="Parent Access ID">students.66 Parent Access ID</column>
			<column column="StudentCoreFields.SINGLEPARENTHSHLDFLAG" description="Single Parent Household">Students.67 Single Parent Household</column>
			<column column="person.isActive" description="Contact 1 is Active">contact1.01 Contact 1 is Active</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_status" description="Contact 1 Living or Deceased">contact1.02 Contact 1 Living or Deceased</column>
			<column column="codeset.code" description="Contact 1 Relationship">contact1.03 Contact 1 Relationship</column>
			<column column="codeset.code" description="Contact 1 Prefix">contact1.04 Contact 1 Prefix</column>
			<column column="person.firstname" description="Contact 1 First Name">contact1.05 Contact 1 First Name</column>
			<column column="person.middlename" description="Contact 1 Middle Name">contact1.06 Contact 1 Middle Name</column>
			<column column="person.lastname" description="Contact 1 Last Name">contact1.07 Contact 1 Last Name</column>
			<column column="U_PERSON_ADDITIONAL_INFO.PERSON_MAIDEN_NAME" description="Contact 1 Maiden Name">contact1.08 Contact 1 Maiden Name</column>
			<column column="codeset.code" description="Contact 1 Suffix">contact1.09 Contact 1 Suffix</column>
			<column column="person.firstname" description="Contact 1 First Last">contact1.10 Contact 1 First Last</column>
			<column column="codeset.code" description="Contact 1 Gender">contact1.11 Contact 1 Gender</column>
			<column column="personphonenumberassoc.phonenumberasentered" description="Contact 1 Phone numbers">contact1.12 Contact 1 Phone numbers</column>
			<column column="EmailAddress.emailaddress" description="Contact 1 Email Adresses">contact1.13 Contact 1 Email Adresses</column>
			<column column="personaddress.street" description="Contact 1 Home Street">contact1.14 Contact 1 Home Street</column>
			<column column="personaddress.city" description="Contact 1 Home City">contact1.15 Contact 1 Home City</column>
			<column column="codeset.code" description="Contact 1 Home State">contact1.16 Contact 1 Home State</column>
			<column column="personaddress.postalcode" description="Contact 1 Home Zip">contact1.17 Contact 1 Home Zip</column>
			<column column="personaddress.street" description="Contact 1 Mailing Street">contact1.18 Contact 1 Mailing Street</column>
			<column column="personaddress.city" description="Contact 1 Mailing City">personaddress.19 Contact 1 Mailing City</column>
			<column column="codeset.code" description="Contact 1 Mailing State">contact1.20 Contact 1 Mailing State</column>
			<column column="personaddress.postalcode" description="Contact 1 Mailing Zip">contact1.21 Contact 1 Mailing Zip</column>
			<column column="studentcontactdetail.iscustodial" description="Contact 1 Has Custody">contact1.22 Contact 1 Has Custody</column>
			<column column="studentcontactdetail.liveswithflg" description="Contact 1 Lives With">contact1.23 Contact 1 Lives With</column>
			<column column="studentcontactdetail.receivesmailflg" description="Contact 1 Receives Mail">contact1.22 Contact 1 Receives Mail</column>
			<column column="studentcontactdetail.isemergency" description="Contact 1 Emergency Contact">contact1.23 Contact 1 Emergency Contact</column>
			<column column="studentcontactdetail.schoolpickupflg" description="Contact 1 School Pickup">contact1.24 Contact 1 School Pickup</column>
			<column column="guardianstudent.studentsdcid" description="Contact 1 Parent Portal Account">contact1.25 Contact 1 Parent Portal Account</column>
			<column column="person.employer" description="Contact 1 Employer">contact1.26 Contact 1 Employer</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_religion" description="Contact 1 Religion">contact1.28 Contact 1 Religion</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_parish" description="Contact 1 Parish">contact1.29 Contact 1 Parish</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_parish_city" description="Contact 1 Parish City">contact1.30 Contact 1 Parish City</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_parish_state" description="Contact 1 Parish State">contact1.31 Contact 1 Parish State</column>
			<column column="students.Next_school" description="Next School">school.01 Next School</column>
			<column column="SCHOOLS.name" description="School">school.02 School</column>
		</columns>
		<sql>
			<![CDATA[
					WITH HA AS (
						SELECT	
							p.id, 
							pa.street Home_Street,
							pa.city Home_City,
							scs.code Home_State,
							pa.postalcode Home_Zip			
						FROM 
							person p	
							LEFT OUTER JOIN personaddressassoc paa ON (p.id = paa.personid)
							LEFT OUTER JOIN personaddress pa ON (paa.personAddressID = pa.personAddressID)
							JOIN codeset cs ON (paa.AddressTypeCodeSetID = cs.CodeSetID)
							LEFT JOIN codeset scs	ON (pa.statescodesetid = scs.codesetid)
							WHERE  cs.code = 'Home'
							and paa.enddate is null
					), MA AS (
						SELECT	
							p.id, 
							pa.street Mailing_Street,
							pa.city Mailing_City,
							scs.code Mailing_State,
							pa.postalcode Mailing_Zip			
						FROM 
							person p	
							LEFT OUTER JOIN personaddressassoc paa ON (p.id = paa.personid)
							LEFT OUTER JOIN personaddress pa ON (paa.personAddressID = pa.personAddressID)
							JOIN codeset cs ON (paa.AddressTypeCodeSetID = cs.CodeSetID)
							LEFT JOIN codeset scs	ON (pa.statescodesetid = scs.codesetid)
							WHERE  cs.code = 'Mailing'
							and paa.enddate is null
					),
					pcontact as (
						SELECT DISTINCT
							s.dcid,
							sch.abbreviation school,
							s.student_number,
							s.lastfirst,
							s.grade_level,
							s.home_room, 
							p.id contactid,
							sca.contactpriorityorder as pcontactorder,
							precs.code Prefix,
							p.firstname, 
							p.middlename,
							p.lastname,
							CASE 
								WHEN p.firstname IS NULL AND p.lastname IS NULL 
								THEN '-No Name-' 
								ELSE p.firstname||' '||p.lastname 
							END ContactFirstLast,
							sufcs.code Suffix,
							sca.contactpriorityorder, 
							cs.code Relationship, 
							gcs.displayvalue Gender,
							p.employer, 
							Decode(p.isActive, 1, 'Active', 'Inactive') isactive,
							u.person_status,
							u.PERSON_MAIDEN_NAME,
							(
								SELECT LISTAGG(
												Nvl(ppa.phonenumberasentered,'') || '  ' || Nvl(cs.code,''), '  '
												) 
										WITHIN GROUP (ORDER BY po.phoneorder)
								FROM (
										SELECT 
											LEVEL AS phoneorder 
										FROM 
											DUAL CONNECT BY LEVEL <= 3
										) po 
								LEFT JOIN personphonenumberassoc ppa 
								ON (po.phoneorder = ppa.phonenumberpriorityorder  AND ppa.personid = p.id)  
								LEFT JOIN codeset cs 
								ON (ppa.PhoneTypeCodeSetID = cs.CodeSetID)
							) AS Contact_Phone_Numbers,
							(
								SELECT 
									LISTAGG(emailaddress, ' | ') WITHIN GROUP(ORDER BY emailaddresspriorityorder) Email_Addresses
								FROM PersonEmailAddressAssoc pea
								INNER JOIN EmailAddress	ea 
								ON (pea.EmailAddressID = ea.EmailAddressID)
								WHERE pea.personid = p.id
								GROUP BY personid
							)  AS Email_Addresses, 
							Decode(gs.studentsdcid, NULL, 'No', 'Yes') dataaccess,
							DECODE(scd.iscustodial, 1, 'Yes','No') iscustodial,
							DECODE(scd.liveswithflg, 1, 'Yes','No') liveswithflg,
							DECODE(scd.receivesmailflg, 1, 'Yes','No') receivesmailflg,
							DECODE(scd.isemergency, 1, 'Yes','No') isemergency,
							DECODE(scd.schoolpickupflg, 1, 'Yes','No') schoolpickupflg,
							u.person_religion,
							u.person_parish,
							u.person_parish_city, 
							u.person_parish_state,
							g.guardianid,
							PCAS.USERNAME,
							PCASE.emailaddress
							FROM Students s            
							JOIN schools sch ON (s.schoolid = sch.school_number)
							LEFT JOIN studentcontactassoc sca ON (s.dcid = sca.studentdcid)
							LEFT JOIN studentcontactdetail scd  ON (sca.studentcontactassocid = scd.studentcontactassocid)
							LEFT JOIN person p	ON  (sca.personid = p.ID)
							LEFT JOIN codeset cs	ON (cs.codesetid = scd.relationshiptypecodesetid)
							LEFT JOIN codeset precs	ON (precs.codesetid = p.PREFIXCODESETID)
							LEFT JOIN codeset sufcs	ON (sufcs.codesetid = p.SUFFIXCODESETID)
							LEFT JOIN codeset gcs	ON (gcs.codesetid = p.GENDERCODESETID)
							LEFT JOIN guardianpersonassoc gp ON (p.id = gp.personid)
							LEFT JOIN GUARDIAN g ON (gp.guardianid = g.guardianid)
							LEFT JOIN PCAS_ACCOUNT pcas on (g.ACCOUNTIDENTIFIER = pcas.PCAS_ACCOUNTTOKEN)
							LEFT JOIN PCAS_EMAILCONTACT PCASE ON (pcas.PCAS_ACCOUNTID = pcase.PCAS_ACCOUNTID)
							LEFT JOIN guardianstudent gs ON (s.dcid = gs.studentsdcid AND gp.guardianid = gs.guardianid)
							LEFT JOIN U_PERSON_ADDITIONAL_INFO U	ON  (p.ID = u.personid)
							WHERE s.enroll_status in (-1,0)
							ORDER BY s.lastfirst, sca.contactpriorityorder 
					)
					SELECT 
						A.STATE_STUDENTNUMBER AS "State_Number(UUID)",
						SCF.PrevStudentID as Old_SMS_Number,
						A.STUDENT_NUMBER,
						A.FIRST_NAME,
						A.MIDDLE_NAME,
						A.LAST_NAME ,
						A.LASTFIRST AS LastFirst,
						AD.STUDENT_PREFERRED_NAME,
						CASE WHEN A.GENDER= 'M' THEN 'Male' WHEN A.GENDER = 'F' THEN 'Female' ELSE '' End AS Gender,
						to_char(a.dob,'MM/DD/YYYY') AS Birthday,
						A.GRADE_LEVEL,
						A.HOME_ROOM,
						A.CLASSOF,
						CASE WHEN A.FEDETHNICITY = 1 THEN 'Hispanic / Latino' WHEN A.FEDETHNICITY = 0 THEN 'Not Hispanic / Latino' ELSE ' ' END AS "Fed_Ethnicity",
					(SELECT LISTAGG (RACECD, ', ') WITHIN GROUP (ORDER BY RACECD)
							FROM STUDENTRACE A2
							WHERE A2.STUDENTID = A.ID) as "RACE",
						G.name as "District of Residence",
						CASE WHEN SCF.FAMILY_REP= 1 THEN 'YES' WHEN SCF.FAMILY_REP=0 THEN 'NO' END AS Family_rep,
						A.MAILING_STREET,
						A.MAILING_CITY,
						A.MAILING_STATE,
						A.MAILING_ZIP,
						A.STREET as Physical_Street,
						A.CITY as Physical_City,
						A.STATE as Physical_State,
						A.ZIP as Physical_Zip,
						A.HOME_PHONE,
						AD.LOCKER_LOCATION,
						A.LOCKER_NUMBER,
						A.LOCKER_COMBINATION,
						CASE WHEN NCEA.TITLEI_TF= 1 THEN 'Yes' WHEN NCEA.TITLEI_TF= 0 THEN 'No' ELSE '' END AS Title_1,
						CASE WHEN NCEA.DIAGNOSEDDISABILITY_TF= 1 THEN 'Yes' WHEN NCEA.DIAGNOSEDDISABILITY_TF= 0 THEN 'No' ELSE '' END AS Disability,
						CASE WHEN NCEA.UNGRADED_TF= 1 THEN 'Yes' WHEN NCEA.UNGRADED_TF= 0 THEN 'No' ELSE '' END AS Ungraded,
						NCEA.FEDERALNUTRITION AS "Free_Reduced",
						CASE WHEN NCEA.SUBSIDIZEDTRANS_TF= 1 THEN 'Yes' WHEN NCEA.SUBSIDIZEDTRANS_TF= 0 THEN 'No' ELSE '' END AS Sub_Transport,
						CASE WHEN NCEA.RELIGIOUSAFFILIATION= 'C' THEN 'Catholic' WHEN NCEA.RELIGIOUSAFFILIATION= 'N' THEN 'Non-Catholic'ELSE '' END AS Religion,
						SAC.STUDENT_PARISH,
						SAC.STUDENT_PARISH_CITY,
						SAC.STUDENT_PARISH_STATE,
						to_char(SAC.STUDENT_BAPTISM_DATE,'MM/DD/YYYY')as "Baptism_Date",
						SAC.STUDENT_BAPTISM_PARISH,
						SAC.STUDENT_BAPTISM_CITY,
						SAC.STUDENT_BAPTISM_STATE,
						to_char(SAC.STUDENT_CONFESSION_DATE,'MM/DD/YYYY')as "Confession_Date",
						SAC.STUDENT_CONFESSION_PARISH,
						SAC.STUDENT_CONFESSION_CITY,
						SAC.STUDENT_CONFESSION_STATE,
						to_char(SAC.STUDENT_COMMUNION_DATE,'MM/DD/YYYY')as "Communion_Date",
						SAC.STUDENT_COMMUNION_PARISH,
						SAC.STUDENT_COMMUNION_CITY,
						SAC.STUDENT_COMMUNION_STATE,
						to_char(SAC.STUDENT_CONFIRMATION_DATE,'MM/DD/YYYY')as "Confirmation_Date",
						SAC.STUDENT_CONFIRMATION_PARISH,
						SAC.STUDENT_CONFIRMATION_CITY,
						SAC.STUDENT_CONFIRMATION_STATE,
						A.DOCTOR_NAME,
						A.DOCTOR_PHONE,
						SCF.Dentist_Name,
						SCF.dentist_phone,
						A.ALERT_MEDICAL AS Medical_Alert,
						SCF.ALLERGIES AS Allergies,
						A.ALERT_DISCIPLINE AS Discipline_Alert,
						A.ALERT_OTHER as Other_Alert,
						CASE WHEN A.LDAPENABLED= 1 THEN 'Yes' WHEN A.LDAPENABLED= 0 THEN 'No' ELSE '' END AS LDAP_Enabled,
						CASE WHEN A.STUDENT_ALLOWWEBACCESS= 1 THEN 'Yes' WHEN A.STUDENT_ALLOWWEBACCESS= 0 THEN 'No' ELSE '' END AS Student_Web_Access,
						A.STUDENT_WEB_ID AS Student_Username,
						CASE WHEN A.ALLOWWEBACCESS= 1 THEN 'Yes' WHEN A.ALLOWWEBACCESS= 0 THEN 'No' ELSE '' END AS Parent_Web_Access,
						A.WEB_ID AS Parent_Access_ID,                            
						SCF.SINGLEPARENTHSHLDFLAG AS "Single Parent Household",
						C1.ISACTIVE as Contact_1_is_Active,
						C1.person_status as Contact_1_Living_or_Deceased,
						C1.RELATIONSHIP as Contact_1_Relationship,
						C1.prefix as Contact_1_Prefix,
						C1.firstname as Contact_1_First_Name,
						C1.middlename as Contact_1_Middle_Name,
						C1.lastname as Contact_1_Last_Name,
						C1.PERSON_MAIDEN_NAME as Contact_1_Maiden_Name,
						C1.suffix as Contact_1_Suffix,
						C1.ContactFirstLast as Contact_1_First_Last,
						C1.Gender as Contact_1_Gender,    
						C1.CONTACT_PHONE_NUMBERS as Contact_1_Phone_numbers,
						C1.EMAIL_ADDRESSES as Contact_1_Email_Adresses,
						C1HA.Home_Street as Contact_1_Home_Street,
						C1HA.Home_City as Contact_1_Home_City,
						C1HA.Home_State as Contact_1_Home_State, 
						C1HA.Home_zip as Contact_1_Home_Zip,
						nvl(C1MA.Mailing_Street,C1HA.Home_Street) as Contact_1_Mailing_Street ,
						nvl(C1MA.Mailing_City,C1HA.Home_City) as Contact_1_Mailing_City,
						nvl(C1MA.Mailing_State,C1HA.Home_State)as Contact_1_Mailing_State,
						nvl(C1MA.Mailing_Zip,C1HA.Home_zip) as Contact_1_Mailing_Zip,
						C1.ISCUSTODIAL as Contact_1_Has_Custody,
						C1.LIVESWITHFLG as Contact_1_Lives_With,
						C1.RECEIVESMAILFLG as Contact_1_Recieves_Mail,
						C1.ISEMERGENCY as Contact_1_Emergency_Contact,
						C1.SCHOOLPICKUPFLG as Contact_1_School_Pickup,
						C1.DATAACCESS as Contact_1_Parent_Portal_Account,
						C1.username as Contact_1_Parent_Portal_Username,
						C1.emailaddress as Contact_1_Parent_Portal_Email_Address,
						C1.Employer as Contact_1_Employer, 
						C1.person_religion as Contact_1_Religion, 
						C1.person_parish as Contact_1_Parish, 
						C1.Person_parish_city as Contact_1_Parish_City, 
						C1.person_parish_state as Contact_1_Parish_State,
						nxtsch.NAME as Next_school,
						B.NAME as school
					FROM  STUDENTS A
					INNER JOIN SCHOOLS B
						ON B.SCHOOL_NUMBER = A.SCHOOLID
					Left JOIN SCHOOLS nxtsch
						ON nxtsch.SCHOOL_NUMBER = A.Next_School
					INNER JOIN FTE Z
						ON Z.ID = A.FTEID
					LEFT JOIN U_STUDENT_SACRAMENTAL SAC
						ON SAC.STUDENTSDCID = A.DCID
					LEFT JOIN U_STUDENT_ADDITIONAL_INFO AD
						ON AD.STUDENTSDCID = A.DCID
					INNER JOIN StudentCoreFields SCF
						ON SCF.STUDENTSDCID =A.DCID
					LEFT JOIN S_STU_NCEA_X NCEA
						ON NCEA.STUDENTSDCID =A.DCID
					LEFT JOIN Gen G
						ON G.value = A.DistrictOfResidence AND G.cat = 'districts'
					WHERE
						A.enroll_status in (-1,0)
					ORDER BY 
						A.lastfirst
        ]]>
		</sql>
	</query>
</queries>