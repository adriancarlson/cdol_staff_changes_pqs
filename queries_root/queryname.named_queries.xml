<queries>
	<query name="net.cdolinc.student.invalid_email.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Student Emails - Flat</summary>
		<description>PowerQuery to identify students with invalid email addresses</description>
		<columns>
			<column column="students.id">client_uid</column>
			<column column="students.dcid">id</column>
			<column column="students.enroll_status">action</column>
			<column column="psm_studentcontact.email">email</column>
		</columns>
		<sql>
			<![CDATA[
        SELECT 
        rownum as client_uid,
        students.dcid as id,
        'UPDATE' as action,
        students.student_web_id||'@365.cdolinc.net' as email 
        FROM students
        LEFT JOIN
			(
				SELECT students.dcid,
					psm_studentcontact.email
				FROM psm_studentcontact
				INNER JOIN psm_studentcontacttype
					ON psm_studentcontact.studentcontacttypeid = psm_studentcontacttype.id
					AND psm_studentcontacttype.name            = 'Self'
				INNER JOIN sync_studentmap
					ON psm_studentcontact.studentid = sync_studentmap.studentid
				INNER JOIN students
					ON sync_studentmap.studentsdcid = students.dcid
			) 
			std_email ON students.dcid    = std_email.dcid
        WHERE 
			(
				std_email.email           IS NULL
				OR std_email.email NOT LIKE '%@365.cdolinc.net'
			)
        AND students.enroll_status = 0 AND students.student_web_id IS NOT NULL
        ORDER BY students.last_name
        ]]>
		</sql>
	</query>
	<query name="net.cdolinc.sca.sequence.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Contact Priority Order - Flat</summary>
		<description>PowerQuery to identify student contact associations that require sequence updates</description>
		<columns>
			<column column="STUDENTCONTACTASSOC.PERSONID">contactid</column>
			<column column="STUDENTCONTACTASSOC.STUDENTCONTACTASSOCID">deleted</column>
			<column column="STUDENTCONTACTASSOC.STUDENTCONTACTASSOCID">studentContactId</column>
			<column column="STUDENTCONTACTASSOC.CONTACTPRIORITYORDER">sequence</column>
			<column column="STUDENTS.DCID">dcid</column>
			<column column="STUDENTS.STUDENT_NUMBER">studentNumber</column>
			<column column="STUDENTS.FIRST_NAME">firstName</column>
			<column column="STUDENTS.MIDDLE_NAME">middleName</column>
			<column column="STUDENTS.LAST_NAME">lastName</column>
			<column column="SCHOOLS.ABBREVIATION">schoolAbbr</column>
			<column column="SCHOOLS.SCHOOL_NUMBER">schoolNumber</column>
			<column column="ORIGINALCONTACTMAP.ORIGINALCONTACTTYPE">originalContactType</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_HOWOFTEN">autosendHowOften</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_SUMMARY">emailSummary</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_GRADEDETAIL">assignmentDetails</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_ATTENDANCEDETAIL">attendanceDetails</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_SCHOOLANNOUNCEMENTS">schoolAnnouncements</column>
			<column column="GUARDIANSTUDENT.AUTOSEND_BALANCEALERT">balanceAlert</column>
			<column column="GUARDIANNOTIFICATIONEMAIL.NOTIFICATIONEMAIL">notificationEmails</column>
			<column column="GUARDIANSTUDENT.GUARDIANSTUDENTID">canAccessData</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					'false' AS "deleted",
					"studentContactId",
					"sequence",
					"dcid",
					"studentNumber",
					"firstName",
					"middleName",
					"lastName",
					"schoolAbbr",
					"schoolNumber",
					"originalContactType",
					"autosendHowOften",
					"emailSummary",
					"assignmentDetails",
					"attendanceDetails",
					"schoolAnnouncements",
					"balanceAlert",
					"notificationEmails",
					"canAccessData"
				FROM
					(
						SELECT 
							SCA.PERSONID "contactid",
							SCA.STUDENTCONTACTASSOCID "studentContactId",
							SCA.CONTACTPRIORITYORDER "sca_contactpriorityorder",
							ROW_NUMBER() Over (Partition BY SCA.STUDENTDCID Order By SCA.CONTACTPRIORITYORDER) "sequence",
							S.DCID "dcid",
							S.STUDENT_NUMBER "studentNumber",
							S.FIRST_NAME "firstName",
							S.MIDDLE_NAME "middleName",
							S.LAST_NAME "lastName",
							SCH.ABBREVIATION "schoolAbbr",
							SCH.SCHOOL_NUMBER "schoolNumber",
							OCM.ORIGINALCONTACTTYPE "originalContactType",
							nvl(GS.AUTOSEND_HOWOFTEN,0) "autosendHowOften", 
							DECODE(GS.AUTOSEND_SUMMARY, Null, 'false', 0, 'false', 1, 'true') "emailSummary",
							DECODE(GS.AUTOSEND_GRADEDETAIL, Null, 'false', 0, 'false', 1, 'true') "assignmentDetails",
							DECODE(GS.AUTOSEND_ATTENDANCEDETAIL, Null, 'false', 0, 'false', 1, 'true') "attendanceDetails",
							DECODE(GS.AUTOSEND_SCHOOLANNOUNCEMENTS, Null, 'false', 0, 'false', 1, 'true') "schoolAnnouncements",
							DECODE(GS.AUTOSEND_BALANCEALERT, Null, 'false', 0, 'false', 1, 'true') "balanceAlert",
							EMAIL_LIST.LIST_AGG "notificationEmails",
							NVL2(GS.GUARDIANSTUDENTID,'true','false') "canAccessData"
						FROM STUDENTCONTACTASSOC SCA
						LEFT JOIN PERSON P ON P.ID = SCA.PERSONID
						LEFT JOIN STUDENTS S ON S.DCID = SCA.STUDENTDCID
						LEFT JOIN SCHOOLS SCH ON SCH.SCHOOL_NUMBER = S.SCHOOLID
						LEFT JOIN ORIGINALCONTACTMAP OCM ON OCM.STUDENTCONTACTASSOCID = SCA.STUDENTCONTACTASSOCID
						LEFT JOIN GUARDIANPERSONASSOC GPA ON GPA.PERSONID = SCA.PERSONID
						LEFT JOIN GUARDIAN G ON G.GUARDIANID  = GPA.GUARDIANID AND GPA.PERSONID = P.ID
						LEFT JOIN GUARDIANSTUDENT GS ON GS.GUARDIANID = G.GUARDIANID AND GS.STUDENTSDCID = S.DCID
						LEFT JOIN
							(
								SELECT 
									GNE.GUARDIANSTUDENTID,
									ListAgg(GNE.NOTIFICATIONEMAIL, ', ') Within GROUP (ORDER BY GNE.NOTIFICATIONEMAIL) LIST_AGG
								FROM 
									GUARDIANNOTIFICATIONEMAIL GNE
								GROUP BY 
									GNE.GUARDIANSTUDENTID
							) EMAIL_LIST
						ON EMAIL_LIST.GUARDIANSTUDENTID = GS.GUARDIANSTUDENTID
					)
				WHERE "sca_contactpriorityorder" != "sequence"
				ORDER BY "studentContactId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.phone_sequence.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Contact Phone Number Priority Order - Flat</summary>
		<description>PowerQuery to identify contact phone number associations that require sequence updates</description>
		<columns>
			<column column="PERSONPHONENUMBERASSOC.PERSONID">contactid</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">deleted</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">contactsPhoneId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERPRIORITYORDER">sequence</column>
			<column column="PERSONPHONENUMBERASSOC.ISPREFERRED">preferred</column>
			<column column="PERSONPHONENUMBERASSOC.PHONETYPECODESETID">phoneType</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERID">phoneNumberId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERASENTERED">phoneNumber</column>
			<column column="PHONENUMBER.PHONENUMBEREXT">extension</column>
			<column column="PHONENUMBER.ISSMS">sms</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					"deleted",
					"contactsPhoneId",
					"sequence",
					"preferred",
					"phoneType",
					"phoneNumberId",
					"phoneNumber",
					"extension",
					"sms"
				FROM
				(
					SELECT 
						personphonenumberassoc.PERSONID "contactid",
						'false' AS "deleted",
						personphonenumberassoc.PERSONPHONENUMBERASSOCID "contactsPhoneId",
						personphonenumberassoc.PHONENUMBERPRIORITYORDER "phoneNumberPriorityOrder",
						ROW_NUMBER() Over (Partition BY person.ID Order By personphonenumberassoc.PHONENUMBERPRIORITYORDER) "sequence",
						DECODE(personphonenumberassoc.ISPREFERRED, 0, 'false', 1, 'true') "preferred",
						(
							SELECT 
								CODE 
							FROM 
								CODESET 
							WHERE 
								CODESETID= personphonenumberassoc.PHONETYPECODESETID
						) "phoneType",
						personphonenumberassoc.PHONENUMBERID "phoneNumberId",
						personphonenumberassoc.PHONENUMBERASENTERED "phoneNumber",
						phonenumber.PHONENUMBEREXT "extension",
						DECODE(phonenumber.ISSMS, 0, 'false', 1, 'true') "sms"
					FROM person
					INNER JOIN personphonenumberassoc 
						ON person.ID = personphonenumberassoc.PERSONID
					LEFT JOIN phonenumber 
						ON personphonenumberassoc.PHONENUMBERID = phonenumber.PHONENUMBERID
					LEFT OUTER JOIN students 
						ON person.ID = students.PERSON_ID
					WHERE students.DCID IS NULL
				)
				WHERE "phoneNumberPriorityOrder" != "sequence"
				ORDER BY "contactsPhoneId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.invalid_phone_format.flat" flattened="true" tags="myPowerQuery">
		<summary>Invalid Contact Phone Number Format - Flat</summary>
		<description>PowerQuery to identify contact phone number associations that require phonenumberasentered updates</description>
		<columns>
			<column column="PERSONPHONENUMBERASSOC.PERSONID">contactid</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">deleted</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">contactsPhoneId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERPRIORITYORDER">sequence</column>
			<column column="PERSONPHONENUMBERASSOC.ISPREFERRED">preferred</column>
			<column column="PERSONPHONENUMBERASSOC.PHONETYPECODESETID">phoneType</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERID">phoneNumberId</column>
			<column column="PERSONPHONENUMBERASSOC.PHONENUMBERASENTERED">phoneNumber</column>
			<column column="PHONENUMBER.PHONENUMBEREXT">extension</column>
			<column column="PHONENUMBER.ISSMS">sms</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					"deleted",
					"contactsPhoneId",
					"sequence",
					"preferred",
					"phoneType",
					"phoneNumberId",
					"phoneNumber",
					"extension",
					"sms"
				FROM
					(
						SELECT 
						"contactid",
						"deleted",
						"contactsPhoneId",
						"sequence",
						"preferred",
						"phoneType",
						"phoneNumberId",
						"phoneNumberAsEntered",
						CASE
							WHEN LENGTH(clean_phone) = 10
							THEN SUBSTR(clean_phone, 1, 3)
							|| '-'
							|| SUBSTR(clean_phone, 4, 3)
							|| '-'
							|| SUBSTR(clean_phone, 7, 4)
							ELSE NULL
						END AS "phoneNumber",
						"extension",
						"sms"
					FROM
						(
							SELECT 
								personphonenumberassoc.PERSONID "contactid",
								'false' AS "deleted",
								personphonenumberassoc.PERSONPHONENUMBERASSOCID "contactsPhoneId",
								personphonenumberassoc.PHONENUMBERPRIORITYORDER "sequence",
								DECODE(personphonenumberassoc.ISPREFERRED, 0, 'false', 1, 'true') "preferred",
								(
									SELECT 
										CODESET.CODE
									FROM CODESET
									WHERE CODESET.CODESETID = personphonenumberassoc.PHONETYPECODESETID
								) "phoneType",
								personphonenumberassoc.PHONENUMBERID "phoneNumberId",
								personphonenumberassoc.PHONENUMBERASENTERED "phoneNumberAsEntered",
								SUBSTR(TRANSLATE(personphonenumberassoc.PHONENUMBERASENTERED, '1234567890'
								|| personphonenumberassoc.PHONENUMBERASENTERED, '1234567890'), 1, 10) AS clean_phone,
								phonenumber.PHONENUMBEREXT "extension",
								DECODE(phonenumber.ISSMS, 0, 'false', 1, 'true') "sms"
							FROM person
							INNER JOIN personphonenumberassoc
								ON person.ID = personphonenumberassoc.PERSONID
							LEFT OUTER JOIN phonenumber
								ON personphonenumberassoc.PHONENUMBERID = phonenumber.PHONENUMBERID
							LEFT OUTER JOIN students
								ON person.ID         = students.PERSON_ID
							WHERE students.DCID IS NULL
						)
					)
				WHERE "phoneNumberAsEntered" != "phoneNumber"
				AND "phoneNumberAsEntered" NOT LIKE '% x%'
				ORDER BY "contactsPhoneId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.duplicate_phone.flat" flattened="true" tags="myPowerQuery">
		<summary>Duplicate Contact Phone Number - Flat</summary>
		<description>PowerQuery to identify duplicate contact phone number associations</description>
		<columns>
			<column column="PERSONPHONENUMBERASSOC.PERSONID">contactid</column>
			<column column="PERSONPHONENUMBERASSOC.PERSONPHONENUMBERASSOCID">contactsPhoneId</column>
		</columns>
		<sql>
			<![CDATA[
				SELECT 
					"contactid",
					"contactsPhoneId"
				FROM
					(
						SELECT 
						personphonenumberassoc.personid "contactid",
						personphonenumberassoc.PERSONPHONENUMBERASSOCID "contactsPhoneId",
						ROW_NUMBER() Over (Partition BY person.ID, phonenumber.phonenumber Order By personphonenumberassoc.PHONENUMBERPRIORITYORDER) rn
						FROM person
						INNER JOIN personphonenumberassoc 
							ON person.ID = personphonenumberassoc.PERSONID
						LEFT OUTER JOIN phonenumber 
							on personphonenumberassoc.phonenumberid = phonenumber.phonenumberid
						LEFT OUTER JOIN students 
							ON person.ID = students.PERSON_ID
					WHERE students.DCID IS NULL
					)
				WHERE rn > 1
				ORDER BY "contactsPhoneId"
			]]>
		</sql>
	</query>
	<query name="net.cdolinc.contact.address_sequence.flat" flattened="true" tags="myPowerQuery">
	<summary>Invalid Contact Address Priority Order - Flat</summary>
	<description>PowerQuery to identify contact address associations that require sequence updates</description>
	<columns>
		<column column="PERSONADDRESSASSOC.PERSONID">contactid</column>
		<column column="PERSONADDRESSASSOC.PERSONADDRESSASSOCID">deleted</column>
		<column column="PERSONADDRESSASSOC.PERSONADDRESSASSOCID">contactsAddressId</column>
		<column column="PERSONADDRESSASSOC.ADDRESSPRIORITYORDER">sequence</column>
		<column column="PERSONADDRESSASSOC.PERSONADDRESSID">addressId</column>
		<column column="PERSONADDRESSASSOC.ADDRESSTYPECODESETID">addressType</column>
		<column column="PERSONADDRESS.STREET">street</column>
		<column column="PERSONADDRESS.LINETWO">linetwo</column>
		<column column="PERSONADDRESS.UNIT">unit</column>
		<column column="PERSONADDRESS.CITY">city</column>
		<column column="PERSONADDRESS.STATESCODESETID">state</column>
		<column column="PERSONADDRESS.COUNTRYCODESETID">country</column>
		<column column="PERSONADDRESS.POSTALCODE">postalcode</column>	
		<column column="PERSONADDRESSASSOC.STARTDATE">startDate</column>
		<column column="PERSONADDRESSASSOC.ENDDATE">endDate</column>
	</columns>
	<sql>
		<![CDATA[
			SELECT 
				"contactid",
				"deleted",
				"contactsAddressId",
				"sequence",
				"addressId",
				"addressType",
				"street",
				"linetwo",
				"unit",
				"city",
				"state",
				"country",
				"postalcode",
				"startDate",
				"endDate"
			FROM
				(
					SELECT 
					personaddressassoc.personid "contactid",
					'false' AS "deleted",
					personaddressassoc.PERSONADDRESSASSOCID "contactsAddressId",
					personaddressassoc.ADDRESSPRIORITYORDER "addressPriorityOrder",
					ROW_NUMBER() Over (Partition BY person.ID Order By personaddressassoc.ADDRESSPRIORITYORDER) "sequence",
					personaddressassoc.PERSONADDRESSID "addressId",
					(
						SELECT CODE 
						FROM CODESET 
						WHERE CODESETID= personaddressassoc.ADDRESSTYPECODESETID
					) "addressType",
					personaddress.STREET "street",
					personaddress.LINETWO "linetwo",
					personaddress.UNIT "unit",
					personaddress.CITY "city",
					(
						SELECT CODE 
						FROM CODESET 
						WHERE CODESETID= personaddress.STATESCODESETID
					) "state",
					(
						SELECT CODE 
						FROM CODESET 
						WHERE CODESETID= personaddress.COUNTRYCODESETID
					) "country",
					personaddress.POSTALCODE "postalcode",
					personaddressassoc.STARTDATE "startDate",
					personaddressassoc.ENDDATE "endDate"
				FROM person
				INNER JOIN personaddressassoc
					ON person.ID = personaddressassoc.PERSONID
				LEFT OUTER JOIN personaddress
					ON personaddressassoc.PERSONADDRESSID = personaddress.PERSONADDRESSID
				LEFT OUTER JOIN students
					ON person.ID         = students.PERSON_ID
				WHERE students.DCID IS NULL
				)
			WHERE "addressPriorityOrder" != "sequence"
			ORDER BY "contactsAddressId"
		]]>
	</sql>
</query>
<query name="net.cdolinc.allDemoData.students.demographics" flattened="true">
		<summary>CDOL: All Demo Data</summary>
		<description>List all demographic data for students and their first 6 contacts</description>
		<columns>
			<column column="students.STATE_STUDENTNUMBER" description="State Number">students.STATE_STUDENTNUMBER</column>
			<column column="StudentCoreFields.PrevStudentID" description="Old SMS Number">StudentCoreFields.SMS_Number</column>
			<column column="students.STUDENT_NUMBER" description="Student Number">students.STUDENT_NUMBER</column>
			<column column="students.FIRST_NAME" description="First Name">students.FIRST_NAME</column>
			<column column="students.MIDDLE_NAME" description="Middle Name">students.MIDDLE_NAME</column>
			<column column="students.LAST_NAME" description="Last Name">students.LAST_NAME</column>
			<column column="students.LASTFIRST" description="Last First">students.LASTFIRST</column>
			<column column="U_STUDENT_ADDITIONAL_INFO.STUDENT_PREFERRED_NAME" description="Preferend Name">students.STUDENT_PREFERRED_NAME</column>
			<column column="students.GENDER" description="Gender">students.GENDER</column>
			<column column="students.dob" description="DoB">students.dob</column>
			<column column="students.GRADE_LEVEL" description="Grade">students.GRADE_LEVEL</column>
			<column column="students.HOME_ROOM" description="Home Room">students.HOME_ROOM</column>
			<column column="students.CLASSOF" description="Class Of">students.CLASSOF</column>
			<column column="students.FEDETHNICITY" description="Ethnicity">students.FEDETHNICITY</column>
			<column column="STUDENTRACE.RACECD" description="Race">students.race</column>
			<column column="Gen.name" description="District of Residence">students.District_of_Residence</column>
			<column column="StudentCoreFields.FAMILY_REP" description="Family Rep">students.FAMILY_REP</column>
			<column column="students.MAILING_STREET" description="Mailing Street">students.MAILING_STREET</column>
			<column column="students.MAILING_CITY" description="Mailing City">students.MAILING_CITY</column>
			<column column="students.MAILING_STATE" description="Mailing State">students.MAILING_STATE</column>
			<column column="students.MAILING_ZIP" description="Mailing Zip">students.MAILING_ZIP</column>
			<column column="students.STREET" description="Street">students.STREET</column>
			<column column="students.CITY" description="City">students.CITY</column>
			<column column="students.STATE" description="State">students.STATE</column>
			<column column="students.ZIP" description="Zip">students.ZIP</column>
			<column column="students.HOME_PHONE" description="Home Phone">students.HOME_PHONE</column>
			<column column="U_STUDENT_ADDITIONAL_INFO.LOCKER_LOCATION" description="Locker Location">students.LOCKER_LOCATION</column>
			<column column="students.LOCKER_NUMBER" description="Locker Number">students.LOCKER_NUMBER</column>
			<column column="students.LOCKER_COMBINATION" description="Locker Combo">students.LOCKER_COMBINATION</column>
			<column column="S_STU_NCEA_X.TITLEI_TF" description="Title 1">students.TITLE_1</column>
			<column column="S_STU_NCEA_X.DIAGNOSEDDISABILITY_TF" description="Disability">students.DIAGNOSED_DISABILITY</column>
			<column column="S_STU_NCEA_X.UNGRADED_TF" description="Ungraded">students.UNGRADED</column>
			<column column="S_STU_NCEA_X.FEDERALNUTRITION" description="Free Reduced">students.free_reduced</column>
			<column column="S_STU_NCEA_X.SUBSIDIZEDTRANS_TF" description="Sub Transportation">students.SUB_Transportation</column>
			<column column="S_STU_NCEA_X.RELIGIOUSAFFILIATION" description="Religion">students.religion</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_PARISH" description="Parish">students.STUDENT_PARISH</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_PARISH_CITY" description="Parish City">students.STUDENT_PARISH_CITY</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_PARISH_STATE" description="Parish State">students.STUDENT_PARISH_STATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_DATE" description="Baptism Date">students.STUDENT_BAPTISM_DATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_PARISH" description="Baptism Parish">students.STUDENT_BAPTISM_PARISH</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_CITY" description="Baptism City">students.STUDENT_BAPTISM_CITY</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_BAPTISM_STATE" description="Baptism State">students.STUDENT_BAPTISM_STATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_DATE" description="Confession Date">students.STUDENT_CONFESSION_DATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_PARISH" description="Confession Parish">students.STUDENT_CONFESSION_PARISH</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_CITY" description="Confession City">students.STUDENT_CONFESSION_CITY</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFESSION_STATE" description="Confession State">students.STUDENT_CONFESSION_STATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_DATE" description="Communion Date">students.STUDENT_COMMUNION_DATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_PARISH" description="Communion Parish">students.STUDENT_COMMUNION_PARISH</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_CITY" description="Communion City">students.STUDENT_COMMUNION_CITY</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_COMMUNION_STATE" description="Communion State">students.STUDENT_COMMUNION_STATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_DATE" description="Confirmation Date">students.STUDENT_CONFIRMATION_DATE</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_PARISH" description="Confirmation Parish">students.STUDENT_CONFIRMATION_PARISH</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_CITY" description="Confirmation City">students.STUDENT_CONFIRMATION_CITY</column>
			<column column="U_STUDENT_SACRAMENTAL.STUDENT_CONFIRMATION_STATE" description="Confirmation State">students.STUDENT_CONFIRMATION_STATE</column>
			<column column="students.DOCTOR_NAME" description="Doctor Name">students.DOCTOR_NAME</column>
			<column column="students.DOCTOR_PHONE" description="Doctor Phone">students.DOCTOR_PHONE</column>
			<column column="StudentCoreFields.Dentist_Name" description="Dentist Name">students.Dentist_Name</column>
			<column column="StudentCoreFields.dentist_phone" description="Dentist Phone">students.dentist_phone</column>
			<column column="students.ALERT_MEDICAL" description="Medical Alert">students.ALERT_MEDICAL</column>
			<column column="StudentCoreFields.ALLERGIES" description="Allergies">students.ALLERGIES</column>
			<column column="students.ALERT_DISCIPLINE" description="Discipline Alert">students.ALERT_DISCIPLINE</column>
			<column column="students.ALERT_OTHER" description="Other Alert">students.ALERT_OTHER</column>
			<column column="students.LDAPENABLED" description="LDAP Enabled">students.LDAP_ENABLED</column>
			<column column="students.STUDENT_ALLOWWEBACCESS" description="Student Web Access">students.Web_Access</column>
			<column column="students.STUDENT_WEB_ID" description="Student Username">students.STUDENT_Username</column>
			<column column="students.ALLOWWEBACCESS" description="Parent Web Access">students.Parent_Web_Access</column>
			<column column="students.WEB_ID" description="Parent Access ID">students.Parent_Access_ID</column>
			<column column="StudentCoreFields.SINGLEPARENTHSHLDFLAG" description="Single Parent Household">Students.SINGLE_PARENT_HOUSEHOLD</column>
			<column column="person.isActive" description="Contact 1 is Active">contact1.isActive</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_status" description="Contact 1 Living or Deceased">contact1.Living_Deceased</column>
			<column column="codeset.code" description="Contact 1 Relationship">contact1.relationship</column>
			<column column="codeset.code" description="Contact 1 Prefix">contact1.prefix</column>
			<column column="person.firstname" description="Contact 1 First Name">contact1.firstname</column>
			<column column="person.middlename" description="Contact 1 Middle Name">contact1.middlename</column>
			<column column="person.lastname" description="Contact 1 Last Name">contact1.lastname</column>
			<column column="U_PERSON_ADDITIONAL_INFO.PERSON_MAIDEN_NAME" description="Contact 1 Maiden Name">contact1.MAIDEN_NAME</column>
			<column column="codeset.code" description="Contact 1 Suffix">contact1.suffix</column>
			<column column="person.firstname" description="Contact 1 First Last">contact1.firstlast</column>
			<column column="codeset.code" description="Contact 1 Gender">contact1.contact1_gender</column>
			<column column="personphonenumberassoc.phonenumberasentered" description="Contact 1 Phone numbers">contact1.phone_numbers</column>
			<column column="EmailAddress.emailaddress" description="Contact 1 Email Adresses">contact1.email_address</column>
			<column column="personaddress.street" description="Contact 1 Home Street">contact1.contact1_mailing_street</column>
			<column column="personaddress.city" description="Contact 1 Home City">contact1.contact1_Mailing_city</column>
			<column column="codeset.code" description="Contact 1 Home State">contact1.contact1_mailing_state</column>
			<column column="personaddress.postalcode" description="Contact 1 Home Zip">contact1.postalcode</column>
			<column column="personaddress.street" description="Contact 1 Mailing Street">contact1.contact1_street</column>
			<column column="personaddress.city" description="Contact 1 Mailing City">personaddress.contact1_city</column>
			<column column="codeset.code" description="Contact 1 Mailing State">contact1.contact1_state</column>
			<column column="personaddress.postalcode" description="Contact 1 Mailing Zip">contact1.contact1_postalcode</column>
			<column column="studentcontactdetail.iscustodial" description="Contact 1 Has Custody">contact1.has_custody</column>
			<column column="studentcontactdetail.liveswithflg" description="Contact 1 Lives With">contact1.Lives_with</column>
			<column column="studentcontactdetail.receivesmailflg" description="Contact 1 Receives Mail">contact1.receives_mail</column>
			<column column="studentcontactdetail.isemergency" description="Contact 1 Emergency Contact">contact1.Emergency_contACT</column>
			<column column="studentcontactdetail.schoolpickupflg" description="Contact 1 School Pickup">contact1.school_pickup</column>
			<column column="guardianstudent.studentsdcid" description="Contact 1 Parent Portal Account">contact1.Parent_portal_accounts</column>
			<column column="person.employer" description="Contact 1 Employer">contact1.employer</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_religion" description="Contact 1 Religion">contact1.contact1_religion</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_parish" description="Contact 1 Parish">contact1.contact1_parish</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_parish_city" description="Contact 1 Parish City">contact1.contact1_parish_city</column>
			<column column="U_PERSON_ADDITIONAL_INFO.person_parish_state" description="Contact 1 Parish State">contact1.contact1_parish_state</column>
			<column column="students.Next_school" description="Next School">students.Next_school</column>
			<column column="SCHOOLS.name" description="School">students.school_name</column>
		</columns>
		<sql>
			<![CDATA[
				WITH HA AS (
						SELECT	
							p.id, 
							pa.street Home_Street,
							pa.city Home_City,
							scs.code Home_State,
							pa.postalcode Home_Zip			
						FROM 
							person p	
							LEFT OUTER JOIN personaddressassoc paa ON (p.id = paa.personid)
							LEFT OUTER JOIN personaddress pa ON (paa.personAddressID = pa.personAddressID)
							JOIN codeset cs ON (paa.AddressTypeCodeSetID = cs.CodeSetID)
							LEFT JOIN codeset scs	ON (pa.statescodesetid = scs.codesetid)
							WHERE  cs.code = 'Home'
							and paa.enddate is null
						), MA AS (
						SELECT	
							p.id, 
							pa.street Mailing_Street,
							pa.city Mailing_City,
							scs.code Mailing_State,
							pa.postalcode Mailing_Zip			
						FROM 
							person p	
							LEFT OUTER JOIN personaddressassoc paa ON (p.id = paa.personid)
							LEFT OUTER JOIN personaddress pa ON (paa.personAddressID = pa.personAddressID)
							JOIN codeset cs ON (paa.AddressTypeCodeSetID = cs.CodeSetID)
							LEFT JOIN codeset scs	ON (pa.statescodesetid = scs.codesetid)
							WHERE  cs.code = 'Mailing'
							and paa.enddate is null
						),
						pcontact as (
						SELECT DISTINCT
							s.dcid,
							sch.abbreviation school,
							s.student_number,
							s.lastfirst,
							s.grade_level,
							s.home_room, 
							p.id contactid,
							sca.contactpriorityorder as pcontactorder,
							precs.code Prefix,
							p.firstname, 
							p.middlename,
							p.lastname,
							CASE 
								WHEN p.firstname IS NULL AND p.lastname IS NULL 
								THEN '-No Name-' 
								ELSE p.firstname||' '||p.lastname 
							END ContactFirstLast,
							sufcs.code Suffix,
							sca.contactpriorityorder, 
							cs.code Relationship, 
							gcs.displayvalue Gender,
							p.employer, 
							Decode(p.isActive, 1, 'Active', 'Inactive') isactive,
							u.person_status,
							u.PERSON_MAIDEN_NAME,
							(
								SELECT LISTAGG(
												Nvl(ppa.phonenumberasentered,'') || '  ' || Nvl(cs.code,''), '  '
												) 
										WITHIN GROUP (ORDER BY po.phoneorder)
								FROM (
										SELECT 
											LEVEL AS phoneorder 
										FROM 
											DUAL CONNECT BY LEVEL <= 3
										) po 
								LEFT JOIN personphonenumberassoc ppa 
								ON (po.phoneorder = ppa.phonenumberpriorityorder  AND ppa.personid = p.id)  
								LEFT JOIN codeset cs 
								ON (ppa.PhoneTypeCodeSetID = cs.CodeSetID)
							) AS Contact_Phone_Numbers,
							(
								SELECT 
									LISTAGG(emailaddress, ' | ') WITHIN GROUP(ORDER BY emailaddresspriorityorder) Email_Addresses
								FROM PersonEmailAddressAssoc pea
								INNER JOIN EmailAddress	ea 
								ON (pea.EmailAddressID = ea.EmailAddressID)
								WHERE pea.personid = p.id
								GROUP BY personid
							)  AS Email_Addresses, 
							Decode(gs.studentsdcid, NULL, 'No', 'Yes') dataaccess,
							DECODE(scd.iscustodial, 1, 'Yes','No') iscustodial,
							DECODE(scd.liveswithflg, 1, 'Yes','No') liveswithflg,
							DECODE(scd.receivesmailflg, 1, 'Yes','No') receivesmailflg,
							DECODE(scd.isemergency, 1, 'Yes','No') isemergency,
							DECODE(scd.schoolpickupflg, 1, 'Yes','No') schoolpickupflg,
							u.person_religion,
							u.person_parish,
							u.person_parish_city, 
							u.person_parish_state,
							g.guardianid,
							PCAS.USERNAME,
							PCASE.emailaddress
							FROM Students s            
							JOIN schools sch ON (s.schoolid = sch.school_number)
							LEFT JOIN studentcontactassoc sca ON (s.dcid = sca.studentdcid)
							LEFT JOIN studentcontactdetail scd  ON (sca.studentcontactassocid = scd.studentcontactassocid)
							LEFT JOIN person p	ON  (sca.personid = p.ID)
							LEFT JOIN codeset cs	ON (cs.codesetid = scd.relationshiptypecodesetid)
							LEFT JOIN codeset precs	ON (precs.codesetid = p.PREFIXCODESETID)
							LEFT JOIN codeset sufcs	ON (sufcs.codesetid = p.SUFFIXCODESETID)
							LEFT JOIN codeset gcs	ON (gcs.codesetid = p.GENDERCODESETID)
							LEFT JOIN guardianpersonassoc gp ON (p.id = gp.personid)
							LEFT JOIN GUARDIAN g ON (gp.guardianid = g.guardianid)
							LEFT JOIN PCAS_ACCOUNT pcas on (g.ACCOUNTIDENTIFIER = pcas.PCAS_ACCOUNTTOKEN)
							LEFT JOIN PCAS_EMAILCONTACT PCASE ON (pcas.PCAS_ACCOUNTID = pcase.PCAS_ACCOUNTID)
							LEFT JOIN guardianstudent gs ON (s.dcid = gs.studentsdcid AND gp.guardianid = gs.guardianid)
							LEFT JOIN U_PERSON_ADDITIONAL_INFO U	ON  (p.ID = u.personid)
							WHERE s.enroll_status = 0
							ORDER BY s.lastfirst, sca.contactpriorityorder 
						)
						SELECT 
							A.STATE_STUDENTNUMBER AS "State_Number(UUID)",
							SCF.PrevStudentID as Old_SMS_Number,
							A.DCID,
							A.STUDENT_NUMBER,
							A.FIRST_NAME,
							A.MIDDLE_NAME,
							A.LAST_NAME ,
							A.LASTFIRST AS LastFirst,
							AD.STUDENT_PREFERRED_NAME,
							CASE WHEN A.GENDER= 'M' THEN 'Male' WHEN A.GENDER = 'F' THEN 'Female' ELSE '' End AS Gender,
							to_char(a.dob,'MM/DD/YYYY') AS Birthday,
							--BIRTHPLACE
							A.GRADE_LEVEL,
							A.HOME_ROOM,
							A.CLASSOF,
							CASE WHEN A.FEDETHNICITY = 1 THEN 'Hispanic / Latino' WHEN A.FEDETHNICITY = 0 THEN 'Not Hispanic / Latino' ELSE ' ' END AS "Fed_Ethnicity",
						(SELECT LISTAGG (RACECD, ', ') WITHIN GROUP (ORDER BY RACECD)
								FROM STUDENTRACE A2
								WHERE A2.STUDENTID = A.ID) as "RACE",
							G.name as "District of Residence",
							CASE WHEN SCF.FAMILY_REP= 1 THEN 'YES' WHEN SCF.FAMILY_REP=0 THEN 'NO' END AS Family_rep,
							A.MAILING_STREET,
							A.MAILING_CITY,
							A.MAILING_STATE,
							A.MAILING_ZIP,
							A.STREET as Physical_Street,
							A.CITY as Physical_City,
							A.STATE as Physical_State,
							A.ZIP as Physical_Zip,
							A.HOME_PHONE,
							AD.LOCKER_LOCATION,
							A.LOCKER_NUMBER,
							A.LOCKER_COMBINATION,
							CASE WHEN NCEA.TITLEI_TF= 1 THEN 'Yes' WHEN NCEA.TITLEI_TF= 0 THEN 'No' ELSE '' END AS Title_1,
							CASE WHEN NCEA.DIAGNOSEDDISABILITY_TF= 1 THEN 'Yes' WHEN NCEA.DIAGNOSEDDISABILITY_TF= 0 THEN 'No' ELSE '' END AS Disability,
							CASE WHEN NCEA.UNGRADED_TF= 1 THEN 'Yes' WHEN NCEA.UNGRADED_TF= 0 THEN 'No' ELSE '' END AS Ungraded,
							NCEA.FEDERALNUTRITION AS "Free_Reduced",
							CASE WHEN NCEA.SUBSIDIZEDTRANS_TF= 1 THEN 'Yes' WHEN NCEA.SUBSIDIZEDTRANS_TF= 0 THEN 'No' ELSE '' END AS Sub_Transport,
							CASE WHEN NCEA.RELIGIOUSAFFILIATION= 'C' THEN 'Catholic' WHEN NCEA.RELIGIOUSAFFILIATION= 'N' THEN 'Non-Catholic'ELSE '' END AS Religion,
							SAC.STUDENT_PARISH,
							SAC.STUDENT_PARISH_CITY,
							SAC.STUDENT_PARISH_STATE,
							to_char(SAC.STUDENT_BAPTISM_DATE,'MM/DD/YYYY')as "Baptism_Date",
							SAC.STUDENT_BAPTISM_PARISH,
							SAC.STUDENT_BAPTISM_CITY,
							SAC.STUDENT_BAPTISM_STATE,
							to_char(SAC.STUDENT_CONFESSION_DATE,'MM/DD/YYYY')as "Confession_Date",
							SAC.STUDENT_CONFESSION_PARISH,
							SAC.STUDENT_CONFESSION_CITY,
							SAC.STUDENT_CONFESSION_STATE,
							to_char(SAC.STUDENT_COMMUNION_DATE,'MM/DD/YYYY')as "Communion_Date",
							SAC.STUDENT_COMMUNION_PARISH,
							SAC.STUDENT_COMMUNION_CITY,
							SAC.STUDENT_COMMUNION_STATE,
							to_char(SAC.STUDENT_CONFIRMATION_DATE,'MM/DD/YYYY')as "Confirmation_Date",
							SAC.STUDENT_CONFIRMATION_PARISH,
							SAC.STUDENT_CONFIRMATION_CITY,
							SAC.STUDENT_CONFIRMATION_STATE,
							A.DOCTOR_NAME,
							A.DOCTOR_PHONE,
							SCF.Dentist_Name,
							SCF.dentist_phone,
							A.ALERT_MEDICAL AS Medical_Alert,
							SCF.ALLERGIES AS Allergies,
							A.ALERT_DISCIPLINE AS Discipline_Alert,
							A.ALERT_OTHER as Other_Alert,
							CASE WHEN A.LDAPENABLED= 1 THEN 'Yes' WHEN A.LDAPENABLED= 0 THEN 'No' ELSE '' END AS LDAP_Enabled,
							CASE WHEN A.STUDENT_ALLOWWEBACCESS= 1 THEN 'Yes' WHEN A.STUDENT_ALLOWWEBACCESS= 0 THEN 'No' ELSE '' END AS Student_Web_Access,
							A.STUDENT_WEB_ID AS Student_Username,
							CASE WHEN A.ALLOWWEBACCESS= 1 THEN 'Yes' WHEN A.ALLOWWEBACCESS= 0 THEN 'No' ELSE '' END AS Parent_Web_Access,
							A.WEB_ID AS Parent_Access_ID,                            
							SCF.SINGLEPARENTHSHLDFLAG AS "Single Parent Household",
							C1.ISACTIVE as Contact_1_is_Active,
							C1.person_status as Contact_1_Living_or_Deceased,
							C1.RELATIONSHIP as Contact_1_Relationship,
							C1.prefix as Contact_1_Prefix,
							C1.firstname as Contact_1_First_Name,
							C1.middlename as Contact_1_Middle_Name,
							C1.lastname as Contact_1_Last_Name,
							C1.PERSON_MAIDEN_NAME as Contact_1_Maiden_Name,
							C1.suffix as Contact_1_Suffix,
							C1.ContactFirstLast as Contact_1_First_Last,
							C1.Gender as Contact_1_Gender,    
							C1.CONTACT_PHONE_NUMBERS as Contact_1_Phone_numbers,
							C1.EMAIL_ADDRESSES as Contact_1_Email_Adresses,
							C1HA.Home_Street as Contact_1_Home_Street,
							C1HA.Home_City as Contact_1_Home_City,
							C1HA.Home_State as Contact_1_Home_State, 
							C1HA.Home_zip as Contact_1_Home_Zip,
							nvl(C1MA.Mailing_Street,C1HA.Home_Street) as Contact_1_Mailing_Street ,
							nvl(C1MA.Mailing_City,C1HA.Home_City) as Contact_1_Mailing_City,
							nvl(C1MA.Mailing_State,C1HA.Home_State)as Contact_1_Mailing_State,
							nvl(C1MA.Mailing_Zip,C1HA.Home_zip) as Contact_1_Mailing_Zip,
							C1.ISCUSTODIAL as Contact_1_Has_Custody,
							C1.LIVESWITHFLG as Contact_1_Lives_With,
							C1.RECEIVESMAILFLG as Contact_1_Recieves_Mail,
							C1.ISEMERGENCY as Contact_1_Emergency_Contact,
							C1.SCHOOLPICKUPFLG as Contact_1_School_Pickup,
							C1.DATAACCESS as Contact_1_Parent_Portal_Account,
							C1.username as Contact_1_Parent_Portal_Username,
							C1.emailaddress as Contact_1_Parent_Portal_Email_Address,
							C1.Employer as Contact_1_Employer, 
							C1.person_religion as Contact_1_Religion, 
							C1.person_parish as Contact_1_Parish, 
							C1.Person_parish_city as Contact_1_Parish_City, 
							C1.person_parish_state as Contact_1_Parish_State, 
							C2.ISACTIVE as Contact_2_is_Active,
							C2.person_status as Contact_2_Living_or_Deceased,
							C2.RELATIONSHIP as Contact_2_Relationship,
							C2.prefix as Contact_2_Prefix,
							C2.firstname as Contact_2_First_Name,
							C2.middlename as Contact_2_Middle_Name,
							C2.lastname as Contact_2_Last_Name,
							C2.PERSON_MAIDEN_NAME as Contact_2_Maiden_Name,
							C2.suffix as Contact_2_Suffix,
							C2.ContactFirstLast as Contact_2_First_Last,
							C2.Gender as Contact_2_Gender,
							C2.CONTACT_PHONE_NUMBERS as Contact_2_Phone_numbers,
							C2.EMAIL_ADDRESSES as Contact_2_Email_Adresses,
							C2HA.Home_Street as Contact_2_Home_Street,
							C2HA.Home_City as Contact_2_Home_City,
							C2HA.Home_State as Contact_2_Home_State, 
							C2HA.Home_zip as Contact_2_Home_Zip,
							nvl(C2MA.Mailing_Street,C2HA.Home_Street) as Contact_2_Mailing_Street ,
							nvl(C2MA.Mailing_City,C2HA.Home_City) as Contact_2_Mailing_City,
							nvl(C2MA.Mailing_State,C2HA.Home_State)as Contact_2_Mailing_State,
							nvl(C2MA.Mailing_Zip,C2HA.Home_zip) as Contact_2_Mailing_Zip,
							C2.ISCUSTODIAL as Contact_2_Has_Custody,
							C2.LIVESWITHFLG as Contact_2_Lives_With,
							C2.RECEIVESMAILFLG as Contact_2_Recieves_Mail,
							C2.ISEMERGENCY as Contact_2_Emergency_Contact,
							C2.SCHOOLPICKUPFLG as Contact_2_School_Pickup,
							C2.DATAACCESS as Contact_2_Parent_Portal_Account,
							C2.Employer as Contact_2_Employer,
							C2.person_religion as Contact_2_Religion, 
							C2.person_parish as Contact_2_Parish, 
							C2.Person_parish_city as Contact_2_Parish_City, 
							C2.person_parish_state as Contact_2_Parish_State,
							C3.ISACTIVE as Contact_3_is_Active,
							C3.person_status as Contact_3_Living_or_Deceased,
							C3.RELATIONSHIP as Contact_3_Relationship,
							C3.prefix as Contact_3_Prefix,
							C3.firstname as Contact_3_First_Name,
							C3.middlename as Contact_3_Middle_Name,
							C3.lastname as Contact_3_Last_Name,
							C3.PERSON_MAIDEN_NAME as Contact_3_Maiden_Name,
							C3.suffix as Contact_3_Suffix,
							C3.ContactFirstLast as Contact_3_First_Last,
							C3.Gender as Contact_3_Gender,
							C3.CONTACT_PHONE_NUMBERS as Contact_3_Phone_numbers,
							C3.EMAIL_ADDRESSES as Contact_3_Email_Adresses,
							C3HA.Home_Street as Contact_3_Home_Street,
							C3HA.Home_City as Contact_3_Home_City,
							C3HA.Home_State as Contact_3_Home_State, 
							C3HA.Home_zip as Contact_3_Home_Zip,
							nvl(C3MA.Mailing_Street,C3HA.Home_Street) as Contact_3_Mailing_Street ,
							nvl(C3MA.Mailing_City,C3HA.Home_City) as Contact_3_Mailing_City,
							nvl(C3MA.Mailing_State,C3HA.Home_State)as Contact_3_Mailing_State,
							nvl(C3MA.Mailing_Zip,C3HA.Home_zip) as Contact_3_Mailing_Zip,
							C3.ISCUSTODIAL as Contact_3_Has_Custody,
							C3.LIVESWITHFLG as Contact_3_Lives_With,
							C3.RECEIVESMAILFLG as Contact_3_Recieves_Mail,
							C3.ISEMERGENCY as Contact_3_Emergency_Contact,
							C3.SCHOOLPICKUPFLG as Contact_3_School_Pickup,
							C3.Employer as Contact_3_Employer, 
							C3.DATAACCESS as Contact_3_Parent_Portal_Account,
							C3.person_religion as Contact_3_Religion, 
							C3.person_parish as Contact_3_Parish, 
							C3.Person_parish_city as Contact_3_Parish_City, 
							C3.person_parish_state as Contact_3_Parish_State,
							C4.ISACTIVE as Contact_4_is_Active,
							C4.person_status as Contact_4_Living_or_Deceased,
							C4.RELATIONSHIP as Contact_4_Relationship,
							C4.prefix as Contact_4_Prefix,
							C4.firstname as Contact_4_First_Name,
							C4.middlename as Contact_4_Middle_Name,
							C4.lastname as Contact_4_Last_Name,
							C4.PERSON_MAIDEN_NAME as Contact_4_Maiden_Name,
							C4.suffix as Contact_4_Suffix,
							C4.ContactFirstLast as Contact_4_First_Last,
							C4.Gender as Contact_4_Gender,
							C4.CONTACT_PHONE_NUMBERS as Contact_4_Phone_numbers,
							C4.EMAIL_ADDRESSES as Contact_4_Email_Adresses,
							C4HA.Home_Street as Contact_4_Home_Street,
							C4HA.Home_City as Contact_4_Home_City,
							C4HA.Home_State as Contact_4_Home_State, 
							C4HA.Home_zip as Contact_4_Home_Zip,
							nvl(C4MA.Mailing_Street,C4HA.Home_Street) as Contact_4_Mailing_Street ,
							nvl(C4MA.Mailing_City,C4HA.Home_City) as Contact_4_Mailing_City,
							nvl(C4MA.Mailing_State,C4HA.Home_State)as Contact_4_Mailing_State,
							nvl(C4MA.Mailing_Zip,C4HA.Home_zip) as Contact_4_Mailing_Zip,
							C4.ISCUSTODIAL as Contact_4_Has_Custody,
							C4.LIVESWITHFLG as Contact_4_Lives_With,
							C4.RECEIVESMAILFLG as Contact_4_Recieves_Mail,
							C4.ISEMERGENCY as Contact_4_Emergency_Contact,
							C4.SCHOOLPICKUPFLG as Contact_4_School_Pickup,
							C4.DATAACCESS as Contact_4_Parent_Portal_Account,
							C4.Employer as Contact_4_Employer, 
							C4.person_religion as Contact_4_Religion, 
							C4.person_parish as Contact_4_Parish, 
							C4.Person_parish_city as Contact_4_Parish_City, 
							C4.person_parish_state as Contact_4_Parish_State,
							C5.ISACTIVE as Contact_5_is_Active,
							C5.person_status as Contact_5_Living_or_Deceased,
							C5.RELATIONSHIP as Contact_5_Relationship,
							C5.prefix as Contact_5_Prefix,
							C5.firstname as Contact_5_First_Name,
							C5.middlename as Contact_5_Middle_Name,
							C5.lastname as Contact_5_Last_Name,
							C5.PERSON_MAIDEN_NAME as Contact_5_Maiden_Name,
							C5.suffix as Contact_5_Suffix,
							C5.ContactFirstLast as Contact_5_First_Last,
							C5.Gender as Contact_5_Gender,
							C5.CONTACT_PHONE_NUMBERS as Contact_5_Phone_numbers,
							C5.EMAIL_ADDRESSES as Contact_5_Email_Adresses,
							C5HA.Home_Street as Contact_5_Home_Street,
							C5HA.Home_City as Contact_5_Home_City,
							C5HA.Home_State as Contact_5_Home_State, 
							C5HA.Home_zip as Contact_5_Home_Zip,
							nvl(C5MA.Mailing_Street,C5HA.Home_Street) as Contact_5_Mailing_Street ,
							nvl(C5MA.Mailing_City,C5HA.Home_City) as Contact_5_Mailing_City,
							nvl(C5MA.Mailing_State,C5HA.Home_State)as Contact_5_Mailing_State,
							nvl(C5MA.Mailing_Zip,C5HA.Home_zip) as Contact_5_Mailing_Zip,
							C5.ISCUSTODIAL as Contact_5_Has_Custody,
							C5.LIVESWITHFLG as Contact_5_Lives_With,
							C5.RECEIVESMAILFLG as Contact_5_Recieves_Mail,
							C5.ISEMERGENCY as Contact_5_Emergency_Contact,
							C5.SCHOOLPICKUPFLG as Contact_5_School_Pickup,
							C5.DATAACCESS as Contact_5_Parent_Portal_Account,
							C5.Employer as Contact_5_Employer, 
							C5.person_religion as Contact_5_Religion, 
							C5.person_parish as Contact_5_Parish, 
							C5.Person_parish_city as Contact_5_Parish_City, 
							C5.person_parish_state as Contact_5_Parish_State,
							C6.ISACTIVE as Contact_6_is_Active,
							C6.person_status as Contact_6_Living_or_Deceased,
							C6.RELATIONSHIP as Contact_6_Relationship,
							C6.prefix as Contact_6_Prefix,
							C6.firstname as Contact_6_First_Name,
							C6.middlename as Contact_6_Middle_Name,
							C6.lastname as Contact_6_Last_Name,
							C6.PERSON_MAIDEN_NAME as Contact_6_Maiden_Name,
							C6.suffix as Contact_6_Suffix,
							C6.ContactFirstLast as Contact_6_First_Last,
							C6.Gender as Contact_6_Gender,
							C6.CONTACT_PHONE_NUMBERS as Contact_6_Phone_numbers,
							C6.EMAIL_ADDRESSES as Contact_6_Email_Adresses,
							C6HA.Home_Street as Contact_6_Home_Street,
							C6HA.Home_City as Contact_6_Home_City,
							C6HA.Home_State as Contact_6_Home_State, 
							C6HA.Home_zip as Contact_6_Home_Zip,
							nvl(C6MA.Mailing_Street,C6HA.Home_Street) as Contact_6_Mailing_Street ,
							nvl(C6MA.Mailing_City,C6HA.Home_City) as Contact_6_Mailing_City,
							nvl(C6MA.Mailing_State,C6HA.Home_State)as Contact_6_Mailing_State,
							nvl(C6MA.Mailing_Zip,C6HA.Home_zip) as Contact_6_Mailing_Zip,
							C6.ISCUSTODIAL as Contact_6_Has_Custody,
							C6.LIVESWITHFLG as Contact_6_Lives_With,
							C6.RECEIVESMAILFLG as Contact_6_Recieves_Mail,
							C6.ISEMERGENCY as Contact_6_Emergency_Contact,
							C6.SCHOOLPICKUPFLG as Contact_6_School_Pickup,
							C6.DATAACCESS as Contact_6_Parent_Portal_Account,
							C6.Employer as Contact_6_Employer,
							C6.person_religion as Contact_6_Religion, 
							C6.person_parish as Contact_6_Parish, 
							C6.Person_parish_city as Contact_6_Parish_City, 
							C6.person_parish_state as Contact_6_Parish_State,
							nxtsch.NAME as Next_school,
							B.NAME as school
						FROM  STUDENTS A
						INNER JOIN SCHOOLS B
							ON B.SCHOOL_NUMBER = A.SCHOOLID
						Left JOIN SCHOOLS nxtsch
							ON nxtsch.SCHOOL_NUMBER = A.Next_School
						INNER JOIN FTE Z
							ON Z.ID = A.FTEID
						LEFT JOIN U_STUDENT_SACRAMENTAL SAC
							ON SAC.STUDENTSDCID = A.DCID
						LEFT JOIN U_STUDENT_ADDITIONAL_INFO AD
							ON AD.STUDENTSDCID = A.DCID
						INNER JOIN StudentCoreFields SCF
							ON SCF.STUDENTSDCID =A.DCID
						LEFT JOIN S_STU_NCEA_X NCEA
							ON NCEA.STUDENTSDCID =A.DCID
						LEFT JOIN Gen G
							ON G.value = A.DistrictOfResidence AND G.cat = 'districts'
						LEFT JOIN pcontact  C1
							ON (C1.DCID = A.DCID AND C1.pcontactorder =1)
						LEFT JOIN HA C1HA
							ON (C1.contactid = C1HA.id)
						LEFT JOIN MA C1MA
							ON (C1.contactid = C1MA.id)
						LEFT JOIN  pcontact C2
							ON (C2.DCID = A.DCID AND C2.pcontactorder =2)
						LEFT JOIN HA C2HA
							ON (C2.contactid = C2HA.id)
						LEFT JOIN MA C2MA
							ON (C2.contactid = C2MA.id)
						LEFT JOIN  pcontact C3
							ON (C3.DCID = A.DCID AND C3.pcontactorder =3)
						LEFT JOIN HA C3HA
							ON (C3.contactid = C3HA.id)
						LEFT JOIN MA C3MA
							ON (C3.contactid = C3MA.id)
						LEFT JOIN  pcontact C4
							ON (C4.DCID = A.DCID AND C4.pcontactorder =4)
						LEFT JOIN HA C4HA
							ON (C4.contactid = C4HA.id)
						LEFT JOIN MA C4MA
							ON (C4.contactid = C4MA.id)
						LEFT JOIN  pcontact C5
							ON (C5.DCID = A.DCID AND C5.pcontactorder =5)
						LEFT JOIN HA C5HA
							ON (C5.contactid = C5HA.id)
						LEFT JOIN MA C5MA
							ON (C5.contactid = C5MA.id)
						LEFT JOIN  pcontact C6
							ON (C6.DCID = A.DCID AND C6.pcontactorder =6)
						LEFT JOIN HA C6HA
							ON (C6.contactid = C6HA.id)
						LEFT JOIN MA C6MA
							ON (C6.contactid = C6MA.id)
						WHERE
							A.enroll_status in (-1,0)
						ORDER BY 
							A.lastfirst
        ]]>
		</sql>
	</query>
</queries>